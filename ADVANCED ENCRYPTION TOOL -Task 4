from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Protocol.KDF import PBKDF2
import base64

def encrypt_file(file_path, password):
    with open(file_path, "rb") as f:
        data = f.read()
    salt = get_random_bytes(16)
    key = PBKDF2(password, salt, dkLen=32)
    cipher = AES.new(key, AES.MODE_GCM)
    ciphertext, tag = cipher.encrypt_and_digest(data)

    with open(file_path + ".enc", "wb") as f:
        f.write(salt + cipher.nonce + tag + ciphertext)
    print("File encrypted:", file_path + ".enc")

def decrypt_file(file_path, password):
    with open(file_path, "rb") as f:
        raw = f.read()
    salt, nonce, tag, ciphertext = raw[:16], raw[16:32], raw[32:48], raw[48:]
    key = PBKDF2(password, salt, dkLen=32)
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    data = cipher.decrypt_and_verify(ciphertext, tag)

    output_path = file_path.replace(".enc", ".dec")
    with open(output_path, "wb") as f:
        f.write(data)
    print("File decrypted:", output_path)

# Example usage
# encrypt_file("secret.txt", "mypassword")
# decrypt_file("secret.txt.enc", "mypassword")
